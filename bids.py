# -*- coding: utf-8 -*-
"""
Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å—Ç–∞–≤–æ–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤.

–§—É–Ω–∫—Ü–∏–∏:
- –ó–∞–≥—Ä—É–∑–∫–∞ CSV/TSV/XLSX.
- –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è.
- –ü–µ—Ä–µ–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ UTC –≤ America/New_York (NYC), –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç –ø–æ NY (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
- –ü–æ–¥—Å—á—ë—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –∏ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é:
    * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫;
    * —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç (Dispatcher Price - Driver Price);
    * —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ –º–∏–ª—é (Driver Price / Total Miles);
- –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –∏ –¥—Ä.).
- –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ (NY), –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —á–∏—Å–ª—É —Å—Ç–∞–≤–æ–∫ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ –º–∏–ª—é.
- –ì—Ä–∞—Ñ–∏–∫–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –ø–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º, —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç –ø–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º,
  scatter –ø–æ –ø–∞—Ä–∞–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä-–≤–æ–¥–∏—Ç–µ–ª—å (avg profit vs avg $/mile),
  —Ç–∞–π–º—Å–µ—Ä–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –ø–æ –¥–Ω—è–º.
- –í—ã–≥—Ä—É–∑–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ CSV.

–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å:
    streamlit run app.py

–¢—Ä–µ–±—É–µ—Ç—Å—è: streamlit, pandas, numpy, altair
"""

import io
import sys
import numpy as np
import pandas as pd
import streamlit as st
import altair as alt

st.set_page_config(page_title="Dispatcher Bids Analytics", layout="wide")
st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–≤–æ–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤")
st.caption(
    "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ UTC –≤ —Ç–∞–π–º–∑–æ–Ω—É New York (America/New_York)."
    " –≠—Ç—É –æ–ø—Ü–∏—é –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–π –∑–æ–Ω–µ."
)

# ----------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ----------------------------

COLUMN_ALIASES = {
    "created_at_original": ["Created At", "Created At (America/New_York)"],
    "event_at_original": ["Event At", "Event At (America/New_York)"],
    "dispatcher_id": ["Dispatcher ID"],
    "dispatcher_name": ["Dispatcher Name"],  # email
    "unit": ["Unit"],
    "driver_name": ["Driver Name"],
    "total_miles": ["Total Miles"],
    "broker": ["Broker"],
    "driver_price": ["Driver Price"],
    "dispatcher_price": ["Dispatcher Price"],
    "user_dispatch_id": ["User Dispatch ID"],
}

REQUIRED_COLS = list(COLUMN_ALIASES.keys())

NY_TZ = "America/New_York"

@st.cache_data(show_spinner=False)
def load_table(file_bytes: bytes, filename: str) -> pd.DataFrame:
    name = filename.lower()
    if name.endswith(".xlsx") or name.endswith(".xls"):
        df = pd.read_excel(io.BytesIO(file_bytes))
    else:
        # –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (–∫–æ–º–∞/—Ç–∞–±/—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π)
        df = pd.read_csv(io.BytesIO(file_bytes), sep=None, engine="python")
    return df

@st.cache_data(show_spinner=False)
def preprocess(df_in: pd.DataFrame, convert_time: bool) -> pd.DataFrame:
    df = df_in.copy()

    # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º, –ø—Ä–∏–≤–µ–¥—ë–º –∫ –±–∞–∑–æ–≤—ã–º –∏–º–µ–Ω–∞–º
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å case-insensitive —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    cols_map = {}
    lower_map = {c.lower().strip(): c for c in df.columns}
    for dest, aliases in COLUMN_ALIASES.items():
        for alias in aliases:
            lk = alias.lower().strip()
            if lk in lower_map:
                cols_map[lower_map[lk]] = dest
                break
    df = df.rename(columns=cols_map)

    # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
    missing = [dest for dest in REQUIRED_COLS if dest not in df.columns]
    if missing:
        missing_display = [COLUMN_ALIASES[m][0] for m in missing]
        raise ValueError(f"–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_display}")

    # –ß–∏—Å–ª–∞
    for c in ["total_miles", "driver_price", "dispatcher_price"]:
        df[c] = (
            df[c]
            .astype(str)
            .str.replace("$", "", regex=False)
            .str.replace(",", "", regex=False)
            .str.strip()
        )
        df[c] = pd.to_numeric(df[c], errors="coerce")

    # –í—Ä–µ–º—è: –ø–æ –∂–µ–ª–∞–Ω–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ UTC –≤ America/New_York
    if convert_time:
        created_utc = pd.to_datetime(df["created_at_original"], errors="coerce", utc=True)
        event_utc = pd.to_datetime(df["event_at_original"], errors="coerce", utc=True)
        df["created_at_original"] = created_utc
        df["event_at_original"] = event_utc
        df["created_at_ny"] = created_utc.dt.tz_convert(NY_TZ)
        df["event_at_ny"] = event_utc.dt.tz_convert(NY_TZ)
    else:
        def _ensure_ny(series: pd.Series) -> pd.Series:
            tz_info = series.dt.tz
            if tz_info is None:
                return series.dt.tz_localize(NY_TZ, nonexistent="NaT", ambiguous="NaT")
            return series.dt.tz_convert(NY_TZ)

        created_local = pd.to_datetime(df["created_at_original"], errors="coerce")
        event_local = pd.to_datetime(df["event_at_original"], errors="coerce")
        df["created_at_original"] = created_local
        df["event_at_original"] = event_local
        df["created_at_ny"] = _ensure_ny(created_local)
        df["event_at_ny"] = _ensure_ny(event_local)

    # –î–∞—Ç–∞ –ø–æ –ù—å—é-–ô–æ—Ä–∫—É (–¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–æ–∫/—Ñ–∏–ª—å—Ç—Ä–æ–≤)
    df["date_ny"] = df["created_at_ny"].dt.date

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    for c in ["dispatcher_name", "driver_name", "unit", "broker"]:
        if c in df.columns:
            df[c] = df[c].astype(str).str.strip()

    # –ú–µ—Ç—Ä–∏–∫–∏
    df["profit"] = df["dispatcher_price"] - df["driver_price"]
    df["driver_price_per_mile"] = np.where(
        (df["total_miles"].fillna(0) > 0), df["driver_price"] / df["total_miles"], np.nan
    )

    return df

@st.cache_data(show_spinner=False)
def aggregate_tables(df: pd.DataFrame, min_bids_pair: int = 1):
    # –°–≤–æ–¥–∫–∞ –ø–æ –ø–∞—Ä–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä-–≤–æ–¥–∏—Ç–µ–ª—å
    grp_cols = ["dispatcher_name", "driver_name"]
    agg_pair = (
        df.groupby(grp_cols)
        .agg(
            bids=("user_dispatch_id", "count"),
            avg_profit=("profit", "mean"),
            median_profit=("profit", "median"),
            total_profit=("profit", "sum"),
            avg_driver_ppm=("driver_price_per_mile", "mean"),
            avg_miles=("total_miles", "mean"),
            total_miles=("total_miles", "sum"),
            first_bid_ny=("created_at_ny", "min"),
            last_bid_ny=("created_at_ny", "max"),
        )
        .reset_index()
    )
    if min_bids_pair > 1:
        agg_pair = agg_pair.loc[agg_pair["bids"] >= min_bids_pair].copy()

    # –°–≤–æ–¥–∫–∞ –ø–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    agg_disp = (
        df.groupby("dispatcher_name")
        .agg(
            total_bids=("user_dispatch_id", "count"),
            unique_drivers=("driver_name", "nunique"),
            avg_profit=("profit", "mean"),
            median_profit=("profit", "median"),
            total_profit=("profit", "sum"),
            avg_driver_ppm=("driver_price_per_mile", "mean"),
        )
        .reset_index()
        .sort_values(["total_bids", "total_profit"], ascending=[False, False])
    )

    # –ü–æ –¥–Ω—è–º (NY) ‚Äî —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç
    daily = (
        df.groupby(["date_ny", "dispatcher_name"])  # –ø–æ –¥–∞—Ç–∞–º –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
        .agg(avg_profit=("profit", "mean"), bids=("user_dispatch_id", "count"))
        .reset_index()
    )

    return agg_pair, agg_disp, daily


def df_to_csv_bytes(df: pd.DataFrame) -> bytes:
    return df.to_csv(index=False).encode("utf-8-sig")

# ----------------------------
# –°–∞–π–¥–±–∞—Ä: –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# ----------------------------
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ")
    up = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV/TSV/XLSX —Å –ª–æ–≥–∞–º–∏", type=["csv", "tsv", "txt", "xlsx", "xls"])

    st.divider()
    convert_time = st.checkbox(
        "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ America/New_York",
        value=True,
        help="–û—Ç–∫–ª—é—á–∏—Ç–µ, –µ—Å–ª–∏ –≤ –≤—ã–≥—Ä—É–∑–∫–µ —É–∂–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –ø–æ –ù—å—é-–ô–æ—Ä–∫—É.",
    )

    st.divider()
    st.subheader("–§–∏–ª—å—Ç—Ä—ã")
    min_bids_pair = st.number_input("–ú–∏–Ω–∏–º—É–º —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ø–∞—Ä—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä-–≤–æ–¥–∏—Ç–µ–ª—å", min_value=1, max_value=100, value=1, step=1)

# ----------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ----------------------------

if up is not None:
    df_raw = load_table(up.getvalue(), up.name)
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    df_raw = None

if df_raw is not None:
    with st.expander("–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
        st.dataframe(df_raw.head(50), use_container_width=True)

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    try:
        df = preprocess(df_raw, convert_time=convert_time)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        st.stop()

    # –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ NY –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
    min_date, max_date = df["date_ny"].min(), df["date_ny"].max()
    colf1, colf2 = st.columns(2)
    with colf1:
        date_range = st.date_input(
            "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–ø–æ –ù—å—é-–ô–æ—Ä–∫—É)",
            value=(min_date, max_date) if pd.notna(min_date) and pd.notna(max_date) else None,
        )
    with colf2:
        dispatchers = sorted(df["dispatcher_name"].dropna().unique().tolist())
        selected_dispatchers = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤", dispatchers, default=dispatchers)

    # –ü—Ä–∏–º–µ–Ω–∏–º —Ñ–∏–ª—å—Ç—Ä—ã
    if date_range:
        start_d, end_d = date_range if isinstance(date_range, tuple) else (date_range, date_range)
        m = (df["date_ny"] >= start_d) & (df["date_ny"] <= end_d)
        df = df.loc[m].copy()
    if selected_dispatchers:
        df = df[df["dispatcher_name"].isin(selected_dispatchers)].copy()

    if df.empty:
        st.warning("–ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.")
        st.stop()

    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ –º–∏–ª—é
    driver_avg_ppm = df.groupby("driver_name")["driver_price_per_mile"].mean()
    valid_driver_avg_ppm = driver_avg_ppm.dropna()
    with st.sidebar:
        if not valid_driver_avg_ppm.empty:
            default_limit = float(valid_driver_avg_ppm.max())
            default_limit = float(np.ceil(default_limit * 100) / 100)
            max_driver_ppm = st.number_input(
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ –º–∏–ª—é ($/mile)",
                min_value=0.0,
                value=default_limit,
                step=0.1,
                format="%.2f",
                help="–ó–Ω–∞—á–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é (Driver Price / Total Miles).",
            )
        else:
            st.number_input(
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ –º–∏–ª—é ($/mile)",
                min_value=0.0,
                value=0.0,
                step=0.1,
                format="%.2f",
                help="–ó–Ω–∞—á–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é (Driver Price / Total Miles).",
                disabled=True,
            )
            max_driver_ppm = None

    if max_driver_ppm is not None and not valid_driver_avg_ppm.empty:
        allowed_drivers = driver_avg_ppm[driver_avg_ppm.isna() | (driver_avg_ppm <= max_driver_ppm)].index
        df = df[df["driver_name"].isin(allowed_drivers) | df["driver_name"].isna()].copy()

    if df.empty:
        st.warning("–ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.")
        st.stop()

    # –ê–≥—Ä–µ–≥–∞—Ü–∏–∏
    agg_pair, agg_disp, daily = aggregate_tables(df, min_bids_pair=min_bids_pair)

    # ----------------------------
    # –ö–õ–Æ–ß–ï–í–´–ï –°–í–û–î–ö–ò
    # ----------------------------
    st.subheader("–ò—Ç–æ–≥–∏ –ø–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º")
    st.dataframe(agg_disp, use_container_width=True)

    c1, c2, c3, c4 = st.columns(4)
    with c1:
        st.metric("–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫ (–≤–∏–¥–∏–º—ã—Ö)", int(df["user_dispatch_id"].count()))
    with c2:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤", int(df["dispatcher_name"].nunique()))
    with c3:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π", int(df["driver_name"].nunique()))
    with c4:
        st.metric("–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç –ø–æ –≤—Å–µ–º", round(float(df["profit"].mean()), 2) if df["profit"].notna().any() else 0.0)

    # –í—ã–≥—Ä—É–∑–∫–∞ CSV
    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º (CSV)", data=df_to_csv_bytes(agg_disp), file_name="dispatchers_summary.csv", mime="text/csv")

    st.subheader("–ü–∞—Ä—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä-–≤–æ–¥–∏—Ç–µ–ª—å")
    st.caption("–î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –≤–æ–¥–∏—Ç–µ–ª–∏, —á–∏—Å–ª–æ —Å—Ç–∞–≤–æ–∫, —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç –∏ —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ –º–∏–ª—é.")
    st.dataframe(agg_pair, use_container_width=True)
    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø–∞—Ä–∞–º (CSV)", data=df_to_csv_bytes(agg_pair), file_name="dispatcher_driver_pairs.csv", mime="text/csv")

    with st.expander("–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏ NY-–≤—Ä–µ–º–µ–Ω–µ–º"):
        cols_show = [
            "created_at_original",
            "created_at_ny",
            "dispatcher_name",
            "unit",
            "driver_name",
            "total_miles",
            "driver_price",
            "dispatcher_price",
            "profit",
            "driver_price_per_mile",
            "user_dispatch_id",
            "broker",
        ]
        st.dataframe(df[cols_show], use_container_width=True)
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª (CSV)",
            data=df_to_csv_bytes(df[cols_show]),
            file_name="bids_detail_ny.csv",
            mime="text/csv",
        )

    # ----------------------------
    # –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
    # ----------------------------
    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

    # 1) –ö–æ–ª-–≤–æ —Å—Ç–∞–≤–æ–∫ –ø–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º (—Å—Ç–µ–∫ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º)
    if not agg_pair.empty:
        chart_bids = (
            alt.Chart(agg_pair)
            .mark_bar()
            .encode(
                x=alt.X(
                    "dispatcher_name:N",
                    sort=alt.SortField(field="bids", order="descending"),
                    title="–î–∏—Å–ø–µ—Ç—á–µ—Ä",
                ),
                y=alt.Y("sum(bids):Q", stack="zero", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫"),
                color=alt.Color("driver_name:N", title="–í–æ–¥–∏—Ç–µ–ª—å"),
                tooltip=[
                    alt.Tooltip("dispatcher_name:N", title="–î–∏—Å–ø–µ—Ç—á–µ—Ä"),
                    alt.Tooltip("driver_name:N", title="–í–æ–¥–∏—Ç–µ–ª—å"),
                    alt.Tooltip("bids:Q", title="–°—Ç–∞–≤–æ–∫"),
                    alt.Tooltip("avg_profit:Q", title="Avg –ø—Ä–æ—Ñ–∏—Ç", format=".2f"),
                    alt.Tooltip("avg_driver_ppm:Q", title="Avg $/mile", format=".2f"),
                ],
            )
            .properties(height=320)
        )
        st.altair_chart(chart_bids, use_container_width=True)
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º.")

    # 2) –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç –ø–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
    chart_profit = (
        alt.Chart(agg_disp)
        .mark_bar()
        .encode(
            x=alt.X("dispatcher_name:N", sort="-y", title="–î–∏—Å–ø–µ—Ç—á–µ—Ä"),
            y=alt.Y("avg_profit:Q", title="–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç"),
            tooltip=["dispatcher_name", "avg_profit", "median_profit", "total_profit", "total_bids"],
        )
        .properties(height=320)
    )
    st.altair_chart(chart_profit, use_container_width=True)

    # 3) Scatter –ø–æ –ø–∞—Ä–∞–º: avg $/mile vs avg profit, —Ä–∞–∑–º–µ—Ä = –∫–æ–ª-–≤–æ —Å—Ç–∞–≤–æ–∫
    if not agg_pair.empty:
        chart_scatter = (
            alt.Chart(agg_pair)
            .mark_circle()
            .encode(
                x=alt.X("avg_driver_ppm:Q", title="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ –º–∏–ª—é ($/mile)"),
                y=alt.Y("avg_profit:Q", title="–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç"),
                size=alt.Size("bids:Q", title="–°—Ç–∞–≤–æ–∫"),
                color=alt.Color("dispatcher_name:N", title="–î–∏—Å–ø–µ—Ç—á–µ—Ä"),
                tooltip=[
                    "dispatcher_name",
                    "driver_name",
                    "bids",
                    alt.Tooltip("avg_driver_ppm:Q", title="$ –≤–æ–¥–∏—Ç–µ–ª—è/–º–∏–ª—è", format=".2f"),
                    alt.Tooltip("avg_profit:Q", title="Avg –ø—Ä–æ—Ñ–∏—Ç", format=".2f"),
                    alt.Tooltip("total_miles:Q", title="–í—Å–µ–≥–æ –º–∏–ª—å", format=".0f"),
                ],
            )
            .properties(height=380)
        )
        st.altair_chart(chart_scatter, use_container_width=True)

    # 4) –¢–∞–π–º—Å–µ—Ä–∏—è: —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç –ø–æ –¥–Ω—è–º (NY), —Ä–∞—Å–∫—Ä–∞—Å–∫–∞ –ø–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
    if not daily.empty:
        daily_chart = (
            alt.Chart(daily)
            .mark_line(point=True)
            .encode(
                x=alt.X("date_ny:T", title="–î–∞—Ç–∞ (NY)"),
                y=alt.Y("avg_profit:Q", title="–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç"),
                color=alt.Color("dispatcher_name:N", title="–î–∏—Å–ø–µ—Ç—á–µ—Ä"),
                tooltip=["date_ny:T", "dispatcher_name:N", alt.Tooltip("avg_profit:Q", format=".2f"), "bids:Q"],
            )
            .properties(height=340)
        )
        st.altair_chart(daily_chart, use_container_width=True)

    # ----------------------------
    # –î–æ–ø. –∏–¥–µ–∏ –º–µ—Ç—Ä–∏–∫
    # ----------------------------
    with st.expander("–ò–¥–µ–∏ –∏ –∑–∞–º–µ—Ç–∫–∏"):
        st.markdown(
            """
            **–ß—Ç–æ –µ—â—ë –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å:**
            - *–ü—Ä–æ—Ñ–∏—Ç –Ω–∞ –º–∏–ª—é* (profit / total_miles) –ø–æ –ø–∞—Ä–∞–º –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º.
            - *–¢–æ–ø –≤–æ–¥–∏—Ç–µ–ª–µ–π* –ø–æ —É—Å—Ç–æ–π—á–∏–≤–æ–º—É –ø—Ä–æ—Ñ–∏—Ç—É (—Ñ–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º—É–º—É —Å—Ç–∞–≤–æ–∫).
            - *–ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑* –ø–æ –º–µ—Å—è—Ü–∞–º –∏–ª–∏ –±—Ä–æ–∫–µ—Ä–∞–º (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è).
            - *–ê–Ω–æ–º–∞–ª–∏–∏* ‚Äî –≤—ã–±—Ä–æ—Å—ã –ø–æ —Ü–µ–Ω–µ –∑–∞ –º–∏–ª—é –∏–ª–∏ –ø—Ä–æ—Ñ–∏—Ç—É.
            """
        )

else:
    st.stop()
